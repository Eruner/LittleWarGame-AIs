try{void 0===scope.BOT?(scope.BOT=function(){function e(){try{o={UNITS:{},BUILDINGS:{},SUPPLY:{},FLAGS:{}},n=function(e){function r(){try{l||(o(),n()),i(),a(),c(),y()}catch(e){console.log("Error in observe:\n"+e)}}function o(){try{if(h={},h.myNumber=scope.getMyPlayerNumber(),h.myTeam=scope.getMyTeamNumber(),h.myBase=scope.getStartLocationForPlayerNumber(h.myNumber),!h.myBase){var e=scope.getBuildings({player:h.myNumber,type:"Castle"})[0];h.myBase={x:e.getX(),y:e.getY()}}var r=scope.getMapHeight(),o=scope.getMapWidth(),n=o-h.myBase.x,t=r-h.myBase.y;h.allies={},h.enemies={};for(var s,i,a,c=scope.getArrayOfPlayerNumbers(),y=0,l=c.length;l>y;y++)s=c[y],s!=h.myNumber&&(i=scope.getTeamNumber(s),i==h.myTeam?(h.allies[s]={},a=h.allies[s]):(h.enemies[s]={},a=h.enemies[s]),a.base=scope.getStartLocationForPlayerNumber(s),a.base||(a.base={x:n,y:t}),a.goldmines=[]);m.DIPLOMACY=h}catch(p){console.log("Error in analyzeDiplomacy() :\n"+p)}}function n(){try{l={GOLDMINES:{}},l.distance=function(e,r,o,n){return Math.sqrt(Math.pow(e-o,2)+Math.pow(r-n,2))},m.MAP=l,f.cap=scope.player.supplyCap,t(scope.getBuildings({type:"Goldmine"}))}catch(e){console.log("Error in analyzeMap() :\n"+e)}}function t(e){try{var r,o,n,t,i=l.GOLDMINES,a=h.myBase.x,c=h.myBase.y;h.myGoldMines=[],h.BaseMines={},l.GoldWorkers={};for(var y=0,p=e.length;p>y;y++)r=e[y],n={},n.x=r.getX(),n.y=r.getY(),o=r.unit,n.unit=o,n.gold=o.gold,t=o.id,n.id=t,n.distance=l.distance(n.x,n.y,a,c),n.player=s(n.x,n.y,n.distance,t),i[t]=n}catch(m){console.log("Error in analyzeGoldMines() :\n"+m)}}function s(e,r,o,n){var t,s,i,a=o,c=h.myNumber,y="me";try{for(s in h.allies)h.allies.hasOwnProperty(s)&&(i=h.allies[s].base,t=l.distance(e,r,i.x,i.y),a>t&&(a=t,c=s,y="ally"));for(s in h.enemies)h.enemies.hasOwnProperty(s)&&(i=h.enemies[s].base,t=l.distance(e,r,i.x,i.y),a>t&&(a=t,c=s,y="enemy"));switch(y){case"me":h.myGoldMines.push(n),l.GoldWorkers[n]=0,15>a&&(h.BaseMines[h.myBase]=h.BaseMines[h.myBase]||[],h.BaseMines[h.myBase].push(n));break;case"ally":h.allies[c].goldmines.push(n);break;case"enemy":h.enemies[c].goldmines.push(n)}}catch(p){console.log("Error in findClosestPlayer() :\n"+p)}return c}function i(){try{p||(p={},p.previous=scope.getGold(),p.incomeHistory=[],p.totalHistory=[],m.MONEY=p),p.now=scope.getGold(),p.income=p.now-p.previous,p.incomeHistory.push(p.income),p.totalHistory.push(p.now),p.previous=p.now}catch(e){console.log("Error in calculateIncome() :\n"+e)}}function a(){var e,r,o,n,t=h.enemies,s=h.allies;try{for(r in t)t.hasOwnProperty(r)&&(e=t[r],e.workers=scope.getUnits({player:r,type:"Worker"}),e.army=scope.getUnits({player:r,notOfType:"Worker"}));for(n in s)s.hasOwnProperty(n)&&(o=s[n],o.workers=scope.getUnits({player:n,type:"Worker"}),o.army=scope.getUnits({player:n,notOfType:"Worker"}));u.myWorkers=scope.getUnits({player:m.DIPLOMACY.me,type:"Worker"}),u.myArmy=scope.getUnits({player:m.DIPLOMACY.me,notOfType:"Worker"})}catch(i){console.log("Error in checkUnits() :\n"+i)}}function c(){try{g.bases=scope.getBuildings({player:h.myNumber,type:"Castle"}),g.rax=scope.getBuildings({player:h.myNumber,type:"Barracks"}),g.forges=scope.getBuildings({player:h.myNumber,type:"Forge"})}catch(e){console.log("Error in checkBuildings() :\n"+e)}}function y(){try{f.current=scope.getCurrentSupply(),f.max=scope.getMaxSupply(),f.available=f.max-f.current,f.producing=0;for(var e=g.bases,r=g.rax,o=0,n=e.length;n>o;o++)e[o].getUnitTypeNameInProductionQueAt(1)&&f.producing++;for(var t=0,s=r.length;s>t;t++)r[t].getUnitTypeNameInProductionQueAt(1)&&(f.producing+=2)}catch(i){console.log("Error in checkSupply() :\n"+i)}}var l,p,m=e,u=m.UNITS,g=m.BUILDINGS,f=m.SUPPLY,h=m.DIPLOMACY;return{observe:r}}(o),t=function(e){function r(){try{t=s.DIPLOMACY,o(),n()}catch(e){console.log("Error in orient:\n"+e)}}function o(){var e,r,o,n,i,c,y=t.enemies,l=s.MAP.distance,p=t.myBase.x,m=t.myBase.y,u=7,g=20;try{a.enemyAround=!1,a.enemyInBase=!1;for(e in y)if(y.hasOwnProperty(e)){for(r=y[e],o=0,n=r.workers.length;n>o;o++)if(c=r.workers[o],i=l(c.getX(),c.getY(),p,m),g>=i&&(a.enemyAround=!0,u>=i))return void(a.enemyInBase=!0);for(o=0,n=r.army.length;n>o;o++)if(c=r.army[o],i=l(c.getX(),c.getY(),p,m),g>=i&&(a.enemyAround=!0,u>=i))return void(a.enemyInBase=!0)}}catch(f){console.log("Error in areEnemiesInOurTerritory() :\n"+f)}}function n(){try{var e=i.max==i.cap,r=i.current+i.producing>=i.max;a.needSupply=!e&&r}catch(o){console.log("Error in doWeNeedMoreSupply() :\n"+o)}}var t,s=e,i=s.SUPPLY,a=s.FLAGS;return{orient:r}}(o),s=function(e){function r(){try{l=u.DIPLOMACY,a=u.UNITS,c=u.BUILDINGS,y=u.MONEY,p=u.MAP,o(),n()}catch(e){console.log("Error in act:\n"+e)}}function o(){try{g.enemyInBase&&s()}catch(e){console.log("Error in militaryActions() :\n"+e)}}function n(){try{i(),t()}catch(e){console.log("Error in economyActions() :\n"+e)}}function t(){var e,r,o,n,t,s,i=[],c=a.myWorkers,y=l.BaseMines,m={},u=0;try{for(n=c.length;n>u;u++)"Stop"===c[u].unit.order.name&&i.push(c[u]);if(i.length>0){for(e in y)if(y.hasOwnProperty(e))for(o=y[e],u=0,n=o.length;n>u;u++)r=o[u],m[r]=p.GoldWorkers[r];for(u=0,n=i.length;n>u;u++){t=47;for(r in m)m.hasOwnProperty(r)&&m[r]<t&&(t=m[r],s=r);if(!s)return;p.GoldWorkers[s]++,m[s]++,scope.order("Mine",[i[u]],{unit:p.GOLDMINES[s]})}}}catch(g){console.log("Error in assignIdleWorkersToGoldmines() :\n"+g)}}function s(){try{if(l=u.DIPLOMACY,!m)for(var e in l.enemies)l.enemies.hasOwnProperty(e)&&(m=l.enemies[e].base);a=u.UNITS,scope.order("AMove",a.myWorkers,m),scope.order("AMove",a.myArmy,m)}catch(r){console.log("Error in allInRush() :\n"+r)}}function i(){try{for(var e=c.bases,r=y.previous,o=0,n=e.length;r>=50&&n>o;o++)e[o].getUnitTypeNameInProductionQueAt(1)||(scope.order("Train Worker",[e[o]]),r-=50);y.previous=r}catch(t){console.log("Error in trainWorker() :\n"+t)}}var a,c,y,l,p,m,u=e,g=u.FLAGS;return{act:r}}(o)}catch(e){console.log("Error in initApp:\n"+e)}}function r(){n.observe(),t.orient(),s.act()}var o,n,t,s;return{init:e,makeMove:r}}(),scope.BOT.init()):scope.BOT.makeMove()}catch(Pokemon){console.log(Pokemon)}